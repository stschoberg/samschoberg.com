{"version":3,"sources":["profilePic.jpg","components/TopBar.js","components/Experience.js","components/Education.js","components/Profile.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TopBar","props","toggle","bind","state","isOpen","this","setState","Navbar","color","dark","expand","Container","NavbarBrand","href","src","profilePic","className","alt","React","Component","Experience","Row","Col","profile","experiences","map","experience","i","moment","locale","key","Media","left","top","url","object","logo","companyName","body","heading","roles","role","startDate","timeEnd","currentJob","Date","endDate","duration","Number","diff","asMonths","toPrecision","title","format","durationInMonths","durationInYears","parseInt","months","getDuration","location","description","Education","studies","study","institute","graduationYear","relevantCoursework","value","certifications","certification","verification","verificationLink","issueDate","expiryDate","issuer","Profile","activeTab","tab","Jumbotron","summary","Nav","tabs","NavItem","NavLink","classnames","active","onClick","TabContent","TabPane","tabId","Footer","icon","faLinkedin","faGithub","faMedium","faTwitter","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d88cc78c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profilePic.9ffa5c93.jpg\";","import React from 'react';\nimport {Container, Navbar, NavbarBrand} from 'reactstrap';\nimport profilePic from '../profilePic.jpg';\n\n\nclass TopBar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      isOpen: false\n    }\n  }\n\n  toggle() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    })\n  }\n\n  render() {\n    return (\n      <Navbar color=\"dark\" dark expand=\"md\">\n        <Container>\n          <NavbarBrand href=\"/\">\n          <img src={profilePic} className=\"profile-pic\" alt=\"Sam Schoberg\"/>\n\n            <span>Sam Schoberg</span>\n          </NavbarBrand>\n\n        </Container>\n      </Navbar>\n\n    );\n  }\n}\n\nexport default TopBar;\n","import React from \"react\";\nimport { Container, Row, Col } from \"reactstrap\";\nimport profile from \"../profile\";\nimport moment from \"moment\";\nimport { Media } from \"reactstrap\";\n\nfunction getDuration(durationInMonths) {\n    const monthsInAYear = 12;\n    const durationInYears = parseInt(durationInMonths / monthsInAYear);\n    const months = (durationInMonths > monthsInAYear) ? durationInMonths % monthsInAYear : durationInMonths\n\n    return (durationInYears > 0? durationInYears + \" year\" + (durationInYears > 1? \"s\": \"\") + \" and \" : \"\") + (months > 0? months + \" month\" + (months > 1? \"s\": \"\") : \"\");\n\n}\n\nclass Experience extends React.Component {\n    render() {\n        return (\n            <Container>\n                <Row>\n                    <Col>\n                    {\n                        profile.experiences.map(function (experience, i) {\n                            moment.locale('en');\n\n\n\n                            return (\n                                <div key={i}>\n                                    <Media>\n                                        <Media left top href={experience.url}>\n                                            <Media object src={experience.logo} alt={experience.companyName}/>\n                                        </Media>\n                                    <Media body>\n                                        <Media heading>\n                                            <a href={experience.url}>{experience.companyName}</a>\n                                            <span className=\"jobTotalDuration\"></span>\n                                        </Media>\n\n                                        {experience.roles.map(function (role, i){\n                                            const startDate = moment(role.startDate);\n                                            const timeEnd = moment(role.currentJob ? new Date() : new Date(role.endDate));\n                                            const duration = Number(moment.duration(timeEnd.diff(startDate)).asMonths().toPrecision(1));\n\n                                            return (\n                                                <div key={i}>\n                                                    <h5>{role.title}</h5>\n                                                    <span\n                                                        className=\"jobDuration\">{startDate.format('MMM YYYY')} - {role.currentJob ? 'Present' : timeEnd.format('MMM YYYY')} ({getDuration(duration)})</span>\n                                                        <span className=\"jobLocation\">{role.location}</span>\n                                                        <p className=\"jobDescription\">{role.description}</p>\n                                                </div>\n                                            )\n                                        })}\n                                    </Media>\n                                    </Media>\n\n                                </div>\n                            )\n                        }\n                        )\n                    }\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n}\n\nexport default Experience;","import React from 'react';\nimport {Container, Row, Col, Media} from 'reactstrap';\nimport moment from 'moment';\nimport profile from '../profile.json';\n\nclass Education extends React.Component {\n  render() {\n    return <Container>\n      <Row>\n        <Col>\n          {profile.studies.map(function (study, i) {\n            return <Media key={i}>\n              <Media left top href={study.url}>\n                <Media object src={study.logo} alt={study.institute}/> </Media> \n\n              <Media body>\n                <Media heading>\n                  <a href={study.url}>{study.institute}</a>\n                </Media>\n                {\n                  [\n                    {\n                      \"key\": \"Title\",\n                      \"value\": study.title\n                    },\n                    {\n                      \"key\": \"Graduation Year\",\n                      \"value\": study.graduationYear\n                    },\n                    {\n                      \"key\": \"Relevant Coursework\",\n                      \"value\": study.relevantCoursework\n                    }\n                  ].map(function (object, i) {\n                    return <div key={i}>\n                      <Row>\n                        <Col className=\"formLabel\">{object.key}:</Col>\n                      </Row>\n                      <Row>\n                        <Col>{object.value}</Col>\n                      </Row>\n                    </div>\n                  })\n                }\n              </Media>\n            </Media>\n          })}\n        </Col>\n      </Row>\n      <br/>\n      <br/>\n      <Row>\n        <Col>\n          <h4>Certifications:</h4>\n          <hr/>\n          {profile.certifications.map(function (certification, i) {\n            const verification = certification.verificationLink ?\n              <Row>\n                <Col>\n                  <a className=\"certificateLink\" href={certification.verificationLink}>See certificate</a>\n                </Col>\n              </Row> : \"\";\n            return <Media key={i}>\n              <Media left top href={certification.url}>\n                <Media object src={certification.logo} alt={certification.title}/>\n              </Media>\n              <Media body>\n                <Media heading>\n                  <a href={certification.url}>{certification.title}</a>\n                </Media>\n                <Row>\n                  <Col>{moment(certification.issueDate).format('MMM YYYY')} - {(certification.expiryDate) ? moment(certification.expiryDate).format('MMM YYYY') : 'Present'}</Col>\n                </Row>\n                <Row>\n                  <Col>{certification.issuer}</Col>\n                </Row>\n                {verification}\n              </Media>\n            </Media>\n          })}\n        </Col>\n      </Row>\n    </Container>\n  }\n}\n\nexport default Education;","import React from 'react';\nimport {Jumbotron, Container, TabContent, TabPane, Nav, NavItem, NavLink } from \"reactstrap\";\nimport classnames from 'classnames';\nimport Experience from \"./Experience\";\nimport Education from './Education'\nimport profile from '../profile.json'\n\nclass Profile extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      activeTab: '1'\n    };\n  }\n\n  toggle(tab) {\n    if (this.state.activeTab !== tab) {\n      this.setState({\n        activeTab: tab\n      });\n    }\n  }\n\n  render() {\n    return <div>\n      <Jumbotron>\n        <Container>\n          <h1 className=\"display-3\">{profile.title}</h1>\n          <p className=\"lead\">{profile.summary}</p>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <Nav tabs>\n          <NavItem>\n            <NavLink className={classnames({ active: this.state.activeTab === '1' })}\n                     onClick={() => { this.toggle('1'); }}>\n              Experience\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink className={classnames({ active: this.state.activeTab === '2' })}\n                     onClick={() => { this.toggle('2'); }}>\n              Education\n            </NavLink>\n          </NavItem>\n        </Nav>\n        <TabContent activeTab={this.state.activeTab}>\n          <TabPane tabId=\"1\">\n            <Experience/>\n          </TabPane>\n          <TabPane tabId=\"2\">\n            <Education/>\n          </TabPane>\n        </TabContent>\n      </Container>\n    </div>;\n  }\n}\n\nexport default Profile;","import React from 'react';\nimport {Container} from 'reactstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faLinkedin, faGithub, faTwitter, faMedium } from '@fortawesome/free-brands-svg-icons'\n\nclass Footer extends React.Component {\n  render() {\n    return (\n      <footer>\n        <hr/>\n        <Container>\n          <a href=\"https://www.linkedin.com/in/stschoberg/\"><FontAwesomeIcon icon={faLinkedin}></FontAwesomeIcon></a>\n          <a href=\"https://github.com/stschoberg\"><FontAwesomeIcon icon={faGithub}></FontAwesomeIcon></a>\n          <a href=\"https://medium.com/@stschoberg\"><FontAwesomeIcon icon={faMedium}></FontAwesomeIcon></a>\n          <a href=\"https://twitter.com/stschoberg\"><FontAwesomeIcon icon={faTwitter}></FontAwesomeIcon></a>\n        </Container>\n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport './App.css';\nimport TopBar from './components/TopBar';\nimport Profile from './components/Profile';\nimport Footer from './components/Footer';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <TopBar />\n        <Profile />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}